{"version":3,"sources":["components/no-image.jpg","components/Search.js","components/Result.js","components/Results.js","components/Popup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Search","handleInput","search","className","type","placeholder","onChange","onKeyPress","Result","result","openPopup","Poster","noimage","onClick","imdbID","src","alt","Title","Results","results","map","key","Popup","selected","closePopup","Year","aria-label","aria-hidden","imdbRating","Plot","App","useState","s","state","setState","apiurl","href","e","target","value","prevState","axios","then","data","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8IAAAA,EAAOC,QAAU,IAA0B,sC,yHCgB5BC,MAdf,YAA0C,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,OAC7B,OACE,6BAASC,UAAU,kBACjB,2BACEC,KAAK,OACLC,YAAY,wBACZF,UAAU,aACVG,SAAUL,EACVM,WAAYL,M,gBCQLM,MAff,YAAwC,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,UAIxB,MAHqB,OAAjBD,EAAOE,SACTF,EAAOE,OAASC,KAGhB,yBACET,UAAU,8CACVU,QAAS,kBAAMH,EAAUD,EAAOK,UAEhC,yBAAKC,IAAKN,EAAOE,OAAQK,IAAI,UAC7B,4BAAKP,EAAOQ,SCaHC,MAtBf,YAA0C,IAAvBC,EAAsB,EAAtBA,QAAST,EAAa,EAAbA,UAC1B,OAAIS,EAEA,6BAAShB,UAAU,WAChBgB,EAAQC,KAAI,SAAAX,GAAM,OACjB,kBAAC,EAAD,CAAQY,IAAKZ,EAAOK,OAAQL,OAAQA,EAAQC,UAAWA,QAM3D,6BAASP,UAAU,WACjB,yBAAKA,UAAU,SACb,iGCcKmB,MA5Bf,YAA0C,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,WAIzB,MAHuB,OAAnBD,EAASZ,SACXY,EAASZ,OAASC,KAGlB,6BAAST,UAAU,SACjB,yBAAKA,UAAU,WACb,4BACGoB,EAASN,MADZ,IACmB,kCAAQM,EAASE,KAAjB,KACjB,4BACErB,KAAK,SACLD,UAAU,mBACVuB,aAAW,QACXb,QAASW,GAET,0BAAMG,cAAY,QAAlB,UAGJ,uBAAGxB,UAAU,UAAb,WAA+BoB,EAASK,YACxC,yBAAKzB,UAAU,QACb,yBAAKY,IAAKQ,EAASZ,OAAQK,IAAI,UAC/B,2BAAIO,EAASM,UCuDRC,MAxEf,WAAgB,IAAD,EACaC,mBAAS,CACjCC,EAAG,GACHb,QAAS,GACTI,SAAU,KAJC,mBACNU,EADM,KACCC,EADD,KAMPC,EAAS,0CAwCf,OACE,yBAAKhC,UAAU,OACb,gCACE,sDACA,uBAAGA,UAAU,eAAb,cACc,IACZ,uBAAGiC,KAAK,gDAAR,sBAKJ,yBAAKjC,UAAU,aACb,kBAAC,EAAD,CAAQF,YAtCM,SAAAoC,GAClB,IAAIL,EAAIK,EAAEC,OAAOC,MAEjBL,GAAS,SAAAM,GACP,OAAO,eAAKA,EAAZ,CAAuBR,EAAGA,QAkCU9B,OAlDzB,SAAAmC,GACC,UAAVA,EAAEhB,KACJoB,IAAMN,EAAS,MAAQF,EAAMD,GAAGU,MAAK,YAAe,IAC9CvB,EAD6C,EAAXwB,KACnB3C,OAEnBkC,GAAS,SAAAM,GACP,OAAO,eAAKA,EAAZ,CAAuBrB,QAASA,aA8ClC,kBAAC,EAAD,CAASA,QAASc,EAAMd,QAAST,UAhCrB,SAAAkC,GAChBH,IAAMN,EAAS,MAAQS,GAAIF,MAAK,YAAe,IACzCjC,EADwC,EAAXkC,KAKjCT,GAAS,SAAAM,GACP,OAAO,eAAKA,EAAZ,CAAuBjB,SAAUd,aA2BD,oBAAxBwB,EAAMV,SAASN,OACrB,kBAAC,EAAD,CAAOM,SAAUU,EAAMV,SAAUC,WAvBtB,WACjBU,GAAS,SAAAM,GACP,OAAO,eAAKA,EAAZ,CAAuBjB,SAAU,cCrCnBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMd,MAAK,SAAAe,GACjCA,EAAaC,kB","file":"static/js/main.cca5ccaa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/no-image.c6b3a8d2.jpg\";","import React from \"react\";\n\nfunction Search({ handleInput, search }) {\n  return (\n    <section className=\"searchbox-wrap\">\n      <input\n        type=\"text\"\n        placeholder=\"Search for a movie...\"\n        className=\"searchbox \"\n        onChange={handleInput}\n        onKeyPress={search}\n      />\n    </section>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\nimport noimage from \"./no-image.jpg\";\n\nfunction Result({ result, openPopup }) {\n  if (result.Poster == \"N/A\") {\n    result.Poster = noimage;\n  }\n  return (\n    <div\n      className=\"result col-lg-4 col-md-4 col-sm-6 col-xs-12\"\n      onClick={() => openPopup(result.imdbID)}\n    >\n      <img src={result.Poster} alt=\"Movie\" />\n      <h3>{result.Title}</h3>\n    </div>\n  );\n}\n\nexport default Result;\n","import React from \"react\";\n\nimport Result from \"./Result\";\n\nfunction Results({ results, openPopup }) {\n  if (results) {\n    return (\n      <section className=\"results\">\n        {results.map(result => (\n          <Result key={result.imdbID} result={result} openPopup={openPopup} />\n        ))}\n      </section>\n    );\n  } else {\n    return (\n      <section className=\"results\">\n        <div className=\"empty\">\n          <h3>\n            Sorry we are not able to find this movie, Search another movie\n          </h3>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Results;\n","import React from \"react\";\nimport noimage from \"./no-image.jpg\";\n\nfunction Popup({ selected, closePopup }) {\n  if (selected.Poster == \"N/A\") {\n    selected.Poster = noimage;\n  }\n  return (\n    <section className=\"popup\">\n      <div className=\"content\">\n        <h2>\n          {selected.Title} <span>({selected.Year})</span>\n          <button\n            type=\"button\"\n            className=\"close pull-right\"\n            aria-label=\"Close\"\n            onClick={closePopup}\n          >\n            <span aria-hidden=\"true\">&times;</span>\n          </button>\n        </h2>\n        <p className=\"rating\">Rating: {selected.imdbRating}</p>\n        <div className=\"plot\">\n          <img src={selected.Poster} alt=\"Movie\" />\n          <p>{selected.Plot}</p>\n        </div>\n      </div>\n    </section>\n  );\n}\n\nexport default Popup;\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Search from \"./components/Search\";\nimport Results from \"./components/Results\";\nimport Popup from \"./components/Popup\";\n\nfunction App() {\n  const [state, setState] = useState({\n    s: \"\",\n    results: [],\n    selected: {}\n  });\n  const apiurl = \"http://www.omdbapi.com/?apikey=ec6607c5\";\n\n  const search = e => {\n    if (e.key === \"Enter\") {\n      axios(apiurl + \"&s=\" + state.s).then(({ data }) => {\n        let results = data.Search;\n\n        setState(prevState => {\n          return { ...prevState, results: results };\n        });\n      });\n    }\n  };\n\n  const handleInput = e => {\n    let s = e.target.value;\n\n    setState(prevState => {\n      return { ...prevState, s: s };\n    });\n  };\n\n  const openPopup = id => {\n    axios(apiurl + \"&i=\" + id).then(({ data }) => {\n      let result = data;\n\n      //console.log(result);\n\n      setState(prevState => {\n        return { ...prevState, selected: result };\n      });\n    });\n  };\n\n  const closePopup = () => {\n    setState(prevState => {\n      return { ...prevState, selected: {} };\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>React - Movie Database</h1>\n        <p className=\"center-text\">\n          Designed by{\" \"}\n          <a href=\"https://www.linkedin.com/in/khalilurrehmann/\">\n            Khalil Ur Rehman\n          </a>\n        </p>\n      </header>\n      <div className=\"container\">\n        <Search handleInput={handleInput} search={search} />\n\n        <Results results={state.results} openPopup={openPopup} />\n\n        {typeof state.selected.Title != \"undefined\" ? (\n          <Popup selected={state.selected} closePopup={closePopup} />\n        ) : (\n          false\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}